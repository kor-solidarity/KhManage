<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Member">

	<resultMap type="Member" id="memberResultSet">
		<id property="memberNo" column="MEMBER_NO"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="memberPwd" column="PASSWORD"/>
		<result property="memberName" column="MEMBER_NAME"/>
		<result property="phone" column="PHONE"/>
		<result property="email" column="EMAIL"/>
		<result property="memberType" column="MEMBER_TYPE"/>
		<result property="rankNo" column="RANK_NO"/>
		<result property="rankName" column="RANK_NAME"/>
		<result property="deptNo" column="DEPT_NO"/>
		<result property="deptName" column="DEPT_NAME"/>
		<result property="projectPk" column="PROJECT_PK"/>
		<result property="projectName" column="PROJECT_NAME"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="changeName" column="CHANGE_NAME"/>
		<result property="ext" column="EXT"/>
		<result property="status" column="STATUS"/>
	</resultMap>
	
	<resultMap type="Member" id="memberResultSet2">
		<id property="memberNo" column="MEMBER_NO"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="memberPwd" column="PASSWORD"/>
		<result property="memberName" column="MEMBER_NAME"/>
		<result property="phone" column="PHONE"/>
		<result property="email" column="EMAIL"/>
		<result property="memberType" column="MEMBER_TYPE"/>
		<result property="rankNo" column="RANK_NO"/>
		<result property="rankName" column="RANK_NAME"/>
		<result property="deptNo" column="DEPT_NO"/>
		<result property="deptName" column="DEPT_NAME"/>
		<result property="countProject" column="COUNT(P.PROJECT_PK)"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="status" column="STATUS"/>
	</resultMap>
	
	<resultMap type="Attachment" id="attachmentResultSet">
		<id property="atNo" column="AT_NO"/>
		<result property="division" column="DIVISION"/>
		<result property="originName" column="ORIGIN_NAME"/>
		<result property="changeName" column="CHANGE_NAME"/>
		<result property="filePath" column="FILEPATH"/>
		<result property="ext" column="EXT"/>
	</resultMap>
	
	<resultMap type="AllDashBoard" id="AllDashBoardResultSet">
		<result property="projectPk" column="PROJECT_PK"/>
		<result property="projectName" column="PROJECT_NAME"/>
		<result property="isImportant" column="IS_IMPORTANT"/>
		<result property="projectTypeName" column="TYPE_NAME"/>
		<result property="projectRank" column="PROJECT_RANK"/>
		<result property="projectManager" column="PROJECT_MANAGER"/>
		<result property="managerName" column="MEMBER_NAME"/>
		<result property="deptNo" column="DEPT_NO"/>
		<result property="deptName" column="DEPT_NAME"/>
		<result property="startDate" column="START_DATE"/>
		<result property="endDate" column="END_DATE"/>
		<result property="detail" column="DETAIL"/>
		<result property="remarks" column="REMARKS"/>
		<result property="status" column="STATUS"/>
		<result property="workClear" column="WORKCLEAR"/>
		<result property="allWork" column="ALLWORK"/>
		<result property="issue" column="ISSUE"/>
		<result property="workProduct" column="WORK_PRODUCT"/>
		<result property="before" column="BEFORE"/>
		<result property="pro" column="PRO"/>
		<result property="com" column="COM"/>
		<result property="del" column="DEL"/>
	</resultMap>
	
	<resultMap type="ProjectRank" id="projectRankCountResultSet">
		<result property="ssCount" column="SS"/>
		<result property="sCount" column="S"/>
		<result property="aCount" column="A"/>
		<result property="bCount" column="B"/>
		<result property="cCount" column="C"/>
		<result property="month" column="MONTH"/>
		<result property="count" column="COUNT"/>
		
	</resultMap>
	
	<resultMap type="DeptProjectCount" id="deptProjectCountResultSet">
		<result property="deptNo" column="DEPT_NO"/>
		<result property="deptName" column="DEPT_NAME"/>
		<result property="before" column="BEFORE"/>
		<result property="proceeding" column="PROCEEDING"/>
		<result property="delay" column="DELAY"/>
		<result property="complete" column="COMPLETE"/>
	</resultMap>
	
	<resultMap type="ProjectDetail" id="projectTypeResultSet">
		<result property="projectTypePk" column="TYPE_PK"/>
		<result property="projectTypeName" column="TYPE_NAME"/>
	</resultMap>
	
	<resultMap type="MemberWorkProduct" id="memberWorkProductResultSet">
		<result property="projectName" column="PROJECT_NAME"/>
		<result property="workName" column="WORK_NAME"/>
		<result property="originName" column="ORIGIN_NAME"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="grantorName" column="MEMBER_NAME"/>
		<result property="beginDate" column="BEGIN_DATE"/>
		<result property="completeDate" column="COMPLETE_DATE"/>
		<result property="completeRate" column="COMPLETE_RATE"/>
	</resultMap>
	
	<!-- <resultMap type="Customer" id="customerResultSet">
		<id property="customerNo" column="CUSTOMER_NO"/>
		<result property="customerName" column="CUSTOMER_NAME"/>
	</resultMap> -->
	
	
	<!-- <select id="loginCheck" resultMap="memberResultSet" parameterType="Member">
		SELECT *
		FROM MEMBER
		JOIN RANK R ON(M.RANK_NO = R.RANK_NO)
		WHERE MEMBER_ID = #{memberId}
		AND PASSWORD = #{memberPwd}
		AND STATUS = 'Y'
	</select> -->
	
	<select id="loginCheck" resultMap="memberResultSet" parameterType="Member">
		SELECT M.MEMBER_NO
		      ,M.MEMBER_ID
		      ,M.PASSWORD
		      ,M.MEMBER_NAME
		      ,M.PHONE
		      ,M.EMAIL
		      ,M.MEMBER_TYPE
		      ,M.RANK_NO
		      ,R.RANK_NAME
		      ,M.DEPT_NO
		      ,D.DEPT_NAME
		      ,M.ENROLL_DATE
		      ,M.MODIFY_DATE
		      ,M.STATUS
		FROM MEMBER M
		JOIN RANK R ON(M.RANK_NO = R.RANK_NO)
		JOIN DEPT D ON(D.DEPT_NO = M.DEPT_NO)
		WHERE M.MEMBER_ID = #{memberId}
		AND M.PASSWORD = #{memberPwd}
		AND M.STATUS = 'Y'
	</select>
	
	 
	<insert id="insertMember" parameterType="Member">
		INSERT INTO MEMBER
		VALUES ('M' || TO_CHAR(SEQ_MNO.NEXTVAL, 'FM000'), #{memberId}, #{memberPwd}, #{memberName}, #{phone}, #{email}, #{memberType}, #{rankNo}, #{deptNo}, SYSDATE, SYSDATE, 'Y')
	</insert>
	
	<select id="selectPwd" resultType="java.lang.String" parameterType="java.lang.String">
		SELECT PASSWORD
		FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
		AND STATUS = 'Y'
	</select>
	
	<select id="selectLoginUser" resultMap="memberResultSet" parameterType="Member">
		SELECT M.MEMBER_NO
            ,M.MEMBER_ID
            ,M.PASSWORD
            ,M.MEMBER_NAME
            ,M.PHONE
            ,M.EMAIL
            ,M.MEMBER_TYPE
            ,M.RANK_NO
            ,R.RANK_NAME
            ,M.DEPT_NO
            ,D.DEPT_NAME
            ,M.ENROLL_DATE
            ,M.MODIFY_DATE
            ,M.STATUS
            ,A.CHANGE_NAME
            ,A.EXT
        FROM MEMBER M
        JOIN RANK R ON(M.RANK_NO = R.RANK_NO)
        JOIN DEPT D ON(D.DEPT_NO = M.DEPT_NO)
        LEFT JOIN ATTACHMENT A ON(M.MEMBER_NO = A.DIVISION)
		WHERE M.MEMBER_ID = #{memberId}
		AND M.STATUS = 'Y'
	</select>
	
	
	<!-- 아이디 중복확인 -->
	<select id="checkMemberId" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
	</select>
	
	
	<!-- 회원정보수정 : 비밀번호 수정 -->
	<update id="updatePassword" parameterType="Member">
		UPDATE MEMBER
		SET(PASSWORD, MODIFY_DATE) = (SELECT #{memberPwd}, SYSDATE
									  FROM MEMBER
									  WHERE MEMBER_ID = #{memberId})
		WHERE MEMBER_ID = #{memberId}
	</update>
	
	<!-- 회원정보수정 : 이메일, 전화번호 수정 -->
	<update id="updateMemberInfo" parameterType="Member">
		UPDATE MEMBER
		SET(EMAIL, PHONE, MODIFY_DATE) = (SELECT #{email}, #{phone}, SYSDATE
										  FROM MEMBER
										  WHERE MEMBER_ID = #{memberId})
		WHERE MEMBER_ID = #{memberId}
	</update>
	
	<!-- 회원정보수정 : 프로필 이미지 등록 -->
	<insert id="insertProfileImage" parameterType="Attachment">
		INSERT INTO ATTACHMENT
		VALUES('AT'|| TO_CHAR(SEQ_AT_NO.NEXTVAL, 'FM000'), #{division}, #{originName}, #{changeName} ,#{filePath}, NULL)
	</insert>
	
	<!-- 회원정보 수정 : 프로필 이미지 수정 -->
	<update id="updateProfileImage" parameterType="Attachment">
		UPDATE ATTACHMENT 
		SET ORIGIN_NAME = #{originName}, CHANGE_NAME = #{changeName}, FILEPATH = #{filePath}
		WHERE DIVISION = #{division}
	</update>
	
	<!-- <update id="updateProfileImage" parameterType="Attachment">
		UPDATE ATTACHMENT 
		SET ORIGIN_NAME = #{originName}, CHANGE_NAME = #{changeName}, FILEPATH = #{filePath}, EXT = #{ext}
		WHERE DIVISION = #{division}
	</update> -->

	
	<select id="selectProfileImg" parameterType="Member" resultMap="attachmentResultSet">
		SELECT *
		FROM ATTACHMENT
		WHERE DIVISION = #{memberNo}
	</select>
	
	
	<!-- 멤버 리스트 조회 + 부서 + 프로젝트 같이 불러와야 함 -->
	<!-- join -->
	<select id="selectMemberList" resultMap="memberResultSet2">
		SELECT M.MEMBER_NO 
		      ,M.MEMBER_NAME
		      ,D.DEPT_NAME
		      ,R.RANK_NAME
		      ,COUNT(P.PROJECT_PK)
		      ,M.EMAIL
		      ,M.STATUS
		FROM MEMBER M
		JOIN DEPT D ON(M.DEPT_NO = D.DEPT_NO)
		JOIN RANK R ON(M.RANK_NO = R.RANK_NO)
		LEFT JOIN PROJECT_TEAM P ON(M.MEMBER_NO = P.MEMBER_PK)
		WHERE M.MEMBER_NAME != '관리자' 
		AND M.STATUS = 'Y'
		GROUP BY  M.MEMBER_NO 
		         ,M.MEMBER_NAME
		         ,D.DEPT_NAME
		         ,R.RANK_NAME
		         ,M.EMAIL
		         ,M.STATUS
		ORDER BY MEMBER_NO DESC
	</select>
	
	
	<!-- <select id="selectMemberList" resultMap="memberResultSet">
		SELECT MEMBER_NAME
			 , EMAIL
			 , STATUS
		FROM MEMBER
		WHERE MEMBER_NO != 'M001'
	</select> -->
	 
	 <!-- 페이징 리스트 count-->
	 <select id="memberListCount" resultType="_int">
	 	SELECT COUNT(*)
	 	FROM MEMBER
	 </select>
	 
	 <!-- memberList 이름으로 검색 -->
	 <select id="searchMemberName" resultMap="memberResultSet2">
	 	SELECT M.MEMBER_NO
		      ,M.MEMBER_NAME
		      ,D.DEPT_NAME
		      ,R.RANK_NAME
		      ,COUNT(P.PROJECT_PK)
		      ,M.EMAIL
		      ,M.STATUS
		FROM MEMBER M
		JOIN DEPT D ON(M.DEPT_NO = D.DEPT_NO)
		JOIN RANK R ON(M.RANK_NO = R.RANK_NO)
		LEFT JOIN PROJECT_TEAM P ON(M.MEMBER_NO = P.MEMBER_PK)
		WHERE M.MEMBER_NAME != '관리자' 
		  AND M.STATUS = 'Y'
		  AND M.MEMBER_NAME LIKE '%' || #{memberName} || '%'
		GROUP BY  M.MEMBER_NO 
		         ,M.MEMBER_NAME
		         ,D.DEPT_NAME
		         ,R.RANK_NAME
		         ,M.EMAIL
		         ,M.STATUS
		
	 </select>
	 
	<select id="selectProjectList" resultMap="memberResultSet">
		SELECT PROJECT_PK
			 , PROJECT_NAME
		FROM PROJECT
	</select>
	
	
	
	
	
	<!-- 고객사 테이블 insert -->
	<!-- <insert id="insertMember" parameterType="Member">
		INSERT INTO MEMBER
		VALUES ('M' || TO_CHAR(SEQ_MNO.NEXTVAL, 'FM000'), #{memberId}, #{memberPwd}, #{memberName}, #{phone}, #{email}, #{memberType}, #{rankNo}, #{deptNo}, SYSDATE, SYSDATE, 'Y')
	</insert> -->
	
	<insert id="insertCustomerTable" parameterType="Member">
		INSERT INTO CUSTOMER
		VALUES ('C' || TO_CHAR(SEQ_CUSTOMER.NEXTVAL, 'FM000'), #{memberName})
	</insert>
	
	<insert id="insertCustomer" parameterType="Member">
		INSERT INTO MEMBER
		VALUES ('C' || TO_CHAR(SEQ_MNO.NEXTVAL, 'FM000'), #{memberId}, #{memberPwd}, #{memberName}, #{phone}, #{email}, #{memberType}, NULL, NULL, SYSDATE, SYSDATE, 'Y')
	</insert>
	
	<select id="selectCurrval" resultType="java.lang.String" parameterType="java.lang.String">
		SELECT TO_CHAR(SEQ_MNO.CURRVAL, 'FM000')
		FROM DUAL
	</select>
	
    <insert id="insertCustomerProjectTeam" parameterType="Member">
        INSERT INTO PROJECT_TEAM
        VALUES ('PT' || TO_CHAR(SEQ_TEAM.NEXTVAL, 'FM000'),
                #{projectPk}, 'C' || TO_CHAR(SEQ_MNO.CURRVAL, 'FM000'), 'CM')
    </insert>
	
	<!-- <update id="updatePassword" parameterType="Member">
		UPDATE MEMBER
		SET(PASSWORD, MODIFY_DATE) = (SELECT #{memberPwd}, SYSDATE
									  FROM MEMBER
									  WHERE MEMBER_ID = #{memberId})
		WHERE MEMBER_ID = #{memberId}
	</update> -->
	
	<!-- 회원 패스워드 초기화 -->
	<update id="resetPassword" parameterType="Member">
		UPDATE MEMBER
		SET(PASSWORD, MODIFY_DATE) = (SELECT #{memberPwd}, SYSDATE
		                              FROM MEMBER
		                              WHERE MEMBER_NO = #{memberNo})
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<select id="selectAllDashBoard" parameterType="AllDashBoard" resultMap="AllDashBoardResultSet">
      SELECT RNUM
           , PROJECT_PK
           , PROJECT_NAME
           , IS_IMPORTANT
           , TYPE_NAME
           , PROJECT_RANK
           , PROJECT_MANAGER
           , MEMBER_NAME
           , DEPT_NO
           , DEPT_NAME
           , START_DATE
           , END_DATE
           , DETAIL
           , REMARKS
           , STATUS
           , WORKCLEAR
           , ALLWORK 
           , ISSUE
           , WORK_PRODUCT
      FROM(SELECT ROWNUM RNUM
              , PROJECT_PK
              , PROJECT_NAME
              , IS_IMPORTANT
              , TYPE_NAME
              , PROJECT_RANK
              , PROJECT_MANAGER
              , MEMBER_NAME
              , DEPT_NO
              , DEPT_NAME
              , START_DATE
              , END_DATE
              , DETAIL
              , REMARKS
              , STATUS
              , WORKCLEAR
              , ALLWORK 
              , ISSUE
              , WORK_PRODUCT
         FROM (SELECT P.PROJECT_PK
              , P.PROJECT_NAME
              , P.IS_IMPORTANT
              , T.TYPE_NAME
              , P.PROJECT_RANK
              , P.PROJECT_MANAGER
              , M.MEMBER_NAME
              , P.DEPT_NO
              , D.DEPT_NAME
              , P.START_DATE
              , P.END_DATE
              , P.DETAIL
              , P.REMARKS
              , CASE WHEN P.STATUS = '1' THEN '시작전'
                     WHEN P.STATUS = '2' THEN '진행중'
                     WHEN P.STATUS = '3' THEN '지연'
                     WHEN P.STATUS = '4' THEN '개발완료'
                     WHEN P.STATUS = '5' THEN '납품완료'
              END AS STATUS
              , (SELECT COUNT(*)
                 FROM WORK
                 WHERE PROJECT_NO = P.PROJECT_PK
                 AND STATUS = 'PL승인완료'
                    AND WORK_TYPE = '프로젝트') AS WORKCLEAR
              ,  (SELECT COUNT(*)
                 FROM WORK
                 WHERE PROJECT_NO = P.PROJECT_PK
                    AND WORK_TYPE = '프로젝트') AS ALLWORK 
              , (SELECT COUNT(*)
                 FROM ISSUE 
                 WHERE PROJECT_NO = P.PROJECT_PK) AS ISSUE
              , (SELECT COUNT(*)
                 FROM WORK_PRODUCT WP 
                 JOIN WORK W ON (WP.WORK_NO = W.WORK_NO)
                 WHERE W.PROJECT_NO = P.PROJECT_PK) AS WORK_PRODUCT
         FROM PROJECT P
         JOIN PROJECT_TYPE T ON (P.PROJECT_TYPE_PK = T.TYPE_PK)
         JOIN MEMBER M ON(P.PROJECT_MANAGER = M.MEMBER_NO)
         JOIN DEPT D ON(P.DEPT_NO = D.DEPT_NO)
         ORDER BY P.START_DATE)
         WHERE IS_IMPORTANT = 'Y')
      WHERE RNUM BETWEEN #{start} AND #{end}
   </select>
	
	<select id="selectDeptProjectCount" resultMap="deptProjectCountResultSet">
      SELECT D.DEPT_NO, 
            D.DEPT_NAME
           , (SELECT COUNT(*)
              FROM PROJECT P
              WHERE P.DEPT_NO = D.DEPT_NO
              AND STATUS = '1') AS BEFORE
           , (SELECT COUNT(*)
              FROM PROJECT P
              WHERE P.DEPT_NO = D.DEPT_NO
              AND STATUS = '2') AS PROCEEDING  
           , (SELECT COUNT(*)
              FROM PROJECT P
              WHERE P.DEPT_NO = D.DEPT_NO
              AND STATUS = '3') AS DELAY  
          , (SELECT COUNT(*)
              FROM PROJECT P
              WHERE P.DEPT_NO = D.DEPT_NO
              AND STATUS = '5') AS COMPLETE        
      FROM DEPT D
      WHERE D.DEPT_NAME != '미지정' 
   </select>
	
	<select id="selectSysdate" resultType="java.sql.Date">
		SELECT SYSDATE FROM DUAL
	</select>
	
	<select id="selectAllType" parameterType="java.sql.Date" resultMap="AllDashBoardResultSet">
	<![CDATA[
		SELECT  T.TYPE_NAME 
		       ,(SELECT COUNT(*)
		           FROM PROJECT P
		           WHERE P.PROJECT_TYPE_PK = T.TYPE_PK
		           AND #{date} BETWEEN P.START_DATE AND END_DATE 
		           AND P.STATUS != '4') AS ALLWORK
		FROM PROJECT_TYPE T
		]]>   
	</select>
	
	<select id="selectAllProjectCount" resultType="AllDashBoard">
	<![CDATA[
		SELECT BEFORE, PRO, DEL, COM   
			FROM(SELECT COUNT(*) AS BEFORE
			       FROM PROJECT 
			      WHERE SYSDATE BETWEEN ENROLL_DATE AND START_DATE),
			    (SELECT COUNT(*) AS PRO
			       FROM PROJECT 
			      WHERE SYSDATE BETWEEN START_DATE AND END_DATE),
			    (SELECT COUNT(*) AS DEL
			       FROM PROJECT 
			      WHERE SYSDATE > END_DATE),
			    (SELECT COUNT(*) AS COM
			       FROM PROJECT
			      WHERE STATUS = '4'
			        AND SYSDATE = END_DATE)  
			  ]]>      
	</select>
	
	<select id="searchChartKind" parameterType="java.sql.Date" resultType="AllDashBoard">
		<![CDATA[
		SELECT BEFORE, PRO, DEL, COM   
			FROM(SELECT COUNT(*) AS BEFORE
			       FROM PROJECT 
			      WHERE #{date} BETWEEN ENROLL_DATE AND START_DATE),
			    (SELECT COUNT(*) AS PRO
			       FROM PROJECT 
			      WHERE #{date} BETWEEN START_DATE AND END_DATE),
			    (SELECT COUNT(*) AS DEL
			       FROM PROJECT 
			      WHERE #{date} > END_DATE),
			    (SELECT COUNT(*) AS COM
			       FROM PROJECT
			      WHERE STATUS = '4'
			        AND #{date} = END_DATE)  
			  ]]>      
	</select>
	
	<select id="selectAllProjectType" resultMap="projectTypeResultSet">
		SELECT TYPE_PK, TYPE_NAME
	    FROM PROJECT_TYPE	
	</select>
   
   <select id="selectStatusIssue" resultMap="AllDashBoardResultSet">
	SELECT BEFORE, PRO, COM, DEL
	FROM(SELECT COUNT(*) AS BEFORE
	      FROM ISSUE_HISTORY
	     WHERE (IH_NO, IH_DATE) IN (SELECT IH_NO, MAX(IH_DATE)
	                                FROM ISSUE_HISTORY
	                                GROUP BY IH_NO)
	      AND STATUS = '확인중'
	      AND TO_CHAR(IH_DATE,'YY/MM/DD') = TO_CHAR(SYSDATE,'YY/MM/DD')),
	    (SELECT COUNT(*) AS PRO
	      FROM ISSUE_HISTORY
	     WHERE (IH_NO, IH_DATE) IN (SELECT IH_NO, MAX(IH_DATE)
	                                FROM ISSUE_HISTORY
	                                GROUP BY IH_NO)
	      AND STATUS = '조치중'
	      AND TO_CHAR(IH_DATE,'YY/MM/DD') = TO_CHAR(SYSDATE,'YY/MM/DD')),
	    (SELECT COUNT(*) AS COM
	      FROM ISSUE_HISTORY
	     WHERE (IH_NO, IH_DATE) IN (SELECT IH_NO, MAX(IH_DATE)
	                                FROM ISSUE_HISTORY
	                                GROUP BY IH_NO)
	      AND STATUS = '조치완료'
	      AND TO_CHAR(IH_DATE,'YY/MM/DD') = TO_CHAR(SYSDATE,'YY/MM/DD')),
	    (SELECT COUNT(*) AS DEL
	      FROM ISSUE_HISTORY
	     WHERE (IH_NO, IH_DATE) IN (SELECT IH_NO, MAX(IH_DATE)
	                                FROM ISSUE_HISTORY
	                                GROUP BY IH_NO)
	      AND STATUS = '취소'
	      AND TO_CHAR(IH_DATE,'YY/MM/DD') = TO_CHAR(SYSDATE,'YY/MM/DD'))
   </select>
   
   <select id="selectIssueTypeCount" resultMap="AllDashBoardResultSet">
   		SELECT BEFORE, PRO, COM
		FROM(SELECT COUNT(*) AS BEFORE
		       FROM ISSUE
		      WHERE TO_CHAR(REGISTER_DATE ,'YY/MM/DD') = TO_CHAR(SYSDATE,'YY/MM/DD')
		        AND ISSUE_TYPE = '버그발생'),
		     (SELECT COUNT(*) AS PRO
		        FROM ISSUE
		        WHERE TO_CHAR(REGISTER_DATE ,'YY/MM/DD') = TO_CHAR(SYSDATE,'YY/MM/DD')
		        AND ISSUE_TYPE = '새기능'),
		      (SELECT COUNT(*) AS COM
		        FROM ISSUE
		        WHERE TO_CHAR(REGISTER_DATE ,'YY/MM/DD') = TO_CHAR(SYSDATE,'YY/MM/DD')
		        AND ISSUE_TYPE = '개선사항')
   </select>
   
   <select id="selectAllRankCount" parameterType="ProjectRank" resultMap="projectRankCountResultSet">
   		SELECT SS, S, A, B, C
		FROM(SELECT COUNT(*) AS SS
		       FROM PROJECT
		      WHERE PROJECT_RANK = 'SS'
		        AND EXTRACT(MONTH FROM ENROLL_DATE) = #{month}
		        AND EXTRACT(YEAR FROM SYSDATE) = EXTRACT(YEAR FROM ENROLL_DATE)),
		     (SELECT COUNT(*) AS S
		        FROM PROJECT
		        WHERE PROJECT_RANK = 'S'
		        AND EXTRACT(MONTH FROM ENROLL_DATE) = #{month}
		        AND EXTRACT(YEAR FROM SYSDATE) = EXTRACT(YEAR FROM ENROLL_DATE)),
		     (SELECT COUNT(*) AS A
		        FROM PROJECT
		        WHERE PROJECT_RANK = 'A'
		        AND EXTRACT(MONTH FROM ENROLL_DATE) = #{month}
		        AND EXTRACT(YEAR FROM SYSDATE) = EXTRACT(YEAR FROM ENROLL_DATE)),
		     (SELECT COUNT(*) AS B
		        FROM PROJECT
		        WHERE PROJECT_RANK = 'B'
		        AND EXTRACT(MONTH FROM ENROLL_DATE) = #{month}
		        AND EXTRACT(YEAR FROM SYSDATE) = EXTRACT(YEAR FROM ENROLL_DATE)),
		     (SELECT COUNT(*) AS C
		        FROM PROJECT
		        WHERE PROJECT_RANK = 'C'
		        AND EXTRACT(MONTH FROM ENROLL_DATE) = #{month}
		        AND EXTRACT(YEAR FROM SYSDATE) = EXTRACT(YEAR FROM ENROLL_DATE))	
   </select>
   
	<select id="myWorkCount" resultType="_int">
		SELECT COUNT(*)
		FROM WORK
		WHERE MEMBER_NO = #{memberNo}
		AND STATUS NOT LIKE 'PL승인완료'
		AND WORK_STATUS = 'Y'
	</select>
   
   <select id="myProjectCount" resultType="_int">
		SELECT COUNT(*)
		FROM PROJECT_TEAM
		WHERE MEMBER_PK = #{memberNo}
   </select>
   
   <select id="myIssueCount" resultType="_int">
		SELECT COUNT(*)
		FROM ISSUE
		WHERE TEAMWORKER = #{memberNo}
   </select>
   
   <select id="myRequestApprovalCount" resultType="_int">
   		SELECT COUNT(*)
		FROM WORK
		WHERE MEMBER_NO = #{memberNo}
		AND STATUS = 'PL검토요청'
   </select>
   
   <select id="myChangeCount" resultType="_int">
		SELECT COUNT(*)
		FROM CHANGE_REQUEST C
		JOIN WORK W ON(W.WORK_NO = C.WORK_NO)
		JOIN MEMBER M ON(M.MEMBER_NO = W.MEMBER_NO)
		WHERE W.MEMBER_NO = #{memberNo}
	</select>
   
   <select id="myWorkProductCount" resultType="_int">
		SELECT COUNT(*)
		FROM WORK_PRODUCT WP
		JOIN WORK W ON(W.WORK_NO = WP.WORK_NO)
		JOIN MEMBER M ON(M.MEMBER_NO = W.MEMBER_NO)
		WHERE W.MEMBER_NO = #{memberNo}
   </select>
   
   <select id="selectMyStatic" resultType="MyStatic">
		SELECT BEFORE, DEVELOPING, COMPLETED, TESTCOMPLETED, PLCHECKING, PLCHECKED, DELAYED
		FROM (SELECT COUNT(*) AS BEFORE
			  FROM WORK
			  WHERE STATUS LIKE '시작전'
			      AND MEMBER_NO = #{memberNo}),
			   (SELECT COUNT(*) AS DEVELOPING
			    FROM WORK
			    WHERE STATUS LIKE '개발중'
			      AND MEMBER_NO = #{memberNo}),
			   (SELECT COUNT(*) AS COMPLETED
			    FROM WORK
			    WHERE STATUS LIKE '개발완료'
			      AND MEMBER_NO = #{memberNo}),
			   (SELECT COUNT(*) AS TESTCOMPLETED
			    FROM WORK
			    WHERE STATUS LIKE '테스트완료'
			      AND MEMBER_NO = #{memberNo}),
			   (SELECT COUNT(*) AS PLCHECKING
			    FROM WORK
			    WHERE STATUS LIKE 'PL검토중'
			      AND MEMBER_NO = #{memberNo}),
			   (SELECT COUNT(*) AS PLCHECKED
			    FROM WORK
			    WHERE STATUS LIKE 'PL승인완료'
			      AND MEMBER_NO = #{memberNo}),
			   (SELECT COUNT(*) AS DELAYED
			    FROM WORK
			    WHERE STATUS LIKE '개발지연'
			      AND MEMBER_NO = #{memberNo})
   </select>
   
   <!-- 200503_태원 -->
   <select id="selectIssueStatus" resultMap="AllDashBoardResultSet">
	SELECT BEFORE, PRO, COM, DEL
	FROM(SELECT COUNT(*) AS BEFORE
	     FROM ISSUE_HISTORY IH
         JOIN ISSUE I ON(I.ISSUE_NO = IH.ISSUE_NO)
         JOIN MEMBER M ON(M.MEMBER_NO = I.TEAMWORKER)
	     WHERE (IH_NO, IH_DATE) IN (SELECT IH_NO, MAX(IH_DATE)
	                                FROM ISSUE_HISTORY
	                                GROUP BY IH_NO)
	      AND IH.STATUS = '확인중'
	      AND TO_CHAR(IH_DATE,'YY/MM/DD') = TO_CHAR(SYSDATE,'YY/MM/DD')
          AND M.MEMBER_NO = #{memberNo}),
          
         (SELECT COUNT(*) AS PRO
	     FROM ISSUE_HISTORY IH
         JOIN ISSUE I ON(I.ISSUE_NO = IH.ISSUE_NO)
         JOIN MEMBER M ON(M.MEMBER_NO = I.TEAMWORKER)
	     WHERE (IH_NO, IH_DATE) IN (SELECT IH_NO, MAX(IH_DATE)
	                                FROM ISSUE_HISTORY
	                                GROUP BY IH_NO)
	     AND IH.STATUS = '조치중'
	     AND TO_CHAR(IH_DATE,'YY/MM/DD') = TO_CHAR(SYSDATE,'YY/MM/DD')
         AND M.MEMBER_NO = #{memberNo}),
          
         (SELECT COUNT(*) AS COM
	     FROM ISSUE_HISTORY IH
         JOIN ISSUE I ON(I.ISSUE_NO = IH.ISSUE_NO)
         JOIN MEMBER M ON(M.MEMBER_NO = I.TEAMWORKER)
	     WHERE (IH_NO, IH_DATE) IN (SELECT IH_NO, MAX(IH_DATE)
	                                FROM ISSUE_HISTORY
	                                GROUP BY IH_NO)
	      AND IH.STATUS = '조치완료'
	      AND TO_CHAR(IH_DATE,'YY/MM/DD') = TO_CHAR(SYSDATE,'YY/MM/DD')
          AND M.MEMBER_NO = #{memberNo}),
         
         (SELECT COUNT(*) AS DEL
	     FROM ISSUE_HISTORY IH
         JOIN ISSUE I ON(I.ISSUE_NO = IH.ISSUE_NO)
         JOIN MEMBER M ON(M.MEMBER_NO = I.TEAMWORKER)
	     WHERE (IH_NO, IH_DATE) IN (SELECT IH_NO, MAX(IH_DATE)
	                                FROM ISSUE_HISTORY
	                                GROUP BY IH_NO)
	      AND IH.STATUS = '취소'
	      AND TO_CHAR(IH_DATE,'YY/MM/DD') = TO_CHAR(SYSDATE,'YY/MM/DD')
          AND M.MEMBER_NO = #{memberNo})
          
   </select>
   
   <select id="selectIssueType" resultMap="AllDashBoardResultSet">
   		SELECT BEFORE, PRO, COM
		FROM(SELECT COUNT(*) AS BEFORE
		       FROM ISSUE I
               JOIN MEMBER M ON(M.MEMBER_NO = I.TEAMWORKER)
		      WHERE 
		        I.ISSUE_TYPE = '버그발생'
                AND M.MEMBER_NO = #{memberNo}),
            (SELECT COUNT(*) AS PRO
		       FROM ISSUE I
               JOIN MEMBER M ON(M.MEMBER_NO = I.TEAMWORKER)
		      WHERE
		        I.ISSUE_TYPE = '새기능'
                AND M.MEMBER_NO = #{memberNo}),
            (SELECT COUNT(*) AS COM
		       FROM ISSUE I
               JOIN MEMBER M ON(M.MEMBER_NO = I.TEAMWORKER)
		      WHERE
		        I.ISSUE_TYPE = '개선사항'
                AND M.MEMBER_NO = #{memberNo})
   </select>
   
   <select id="myWorkProductList" resultMap="memberWorkProductResultSet">
		SELECT P.PROJECT_NAME, W.WORK_NAME, A.ORIGIN_NAME, WP.ENROLL_DATE
		FROM WORK_PRODUCT WP
		JOIN WORK W ON(W.WORK_NO = WP.WORK_NO)
		JOIN PROJECT P ON(P.PROJECT_PK = W.PROJECT_NO)
		JOIN ATTACHMENT A ON(A.DIVISION = WP.PRODUCT_NO)
		JOIN MEMBER M ON(M.MEMBER_NO = W.MEMBER_NO)
		WHERE M.MEMBER_NO = #{memberNo}
   </select>
   
   <select id="myWorkList" resultMap="memberWorkProductResultSet">
		SELECT P.PROJECT_NAME, W.WORK_NAME, W.BEGIN_DATE, W.COMPLETE_DATE, W.COMPLETE_RATE, M.MEMBER_NAME
		FROM WORK W
		JOIN PROJECT P ON (W.PROJECT_NO = P.PROJECT_PK)
		JOIN MEMBER M ON(M.MEMBER_NO = W.GRANTOR_NO)
		WHERE BEGIN_DATE BETWEEN (SELECT DECODE(TO_CHAR(SYSDATE, 'D'), 2, TO_CHAR(SYSDATE, 'YY/MM/DD'),
		       TO_DATE(TO_CHAR(SYSDATE - TO_CHAR(SYSDATE, 'D')-7, 'YY/MM/DD')))
		FROM DUAL) AND (SELECT DECODE(TO_CHAR(SYSDATE, 'D'), 2, TO_CHAR(SYSDATE + 7, 'YY/MM/DD'),
		       TO_DATE(TO_CHAR(SYSDATE - TO_CHAR(SYSDATE, 'D')+2, 'YY/MM/DD')))
		FROM DUAL)
		AND COMPLETE_DATE > SYSDATE
		AND W.MEMBER_NO = #{memberNo}
		AND W.WORK_STATUS = 'Y'
		UNION
		SELECT P.PROJECT_NAME, W.WORK_NAME, W.BEGIN_DATE, W.COMPLETE_DATE, W.COMPLETE_RATE, M.MEMBER_NAME
		FROM WORK W
		JOIN PROJECT P ON (W.PROJECT_NO = P.PROJECT_PK)
		JOIN MEMBER M ON(M.MEMBER_NO = W.GRANTOR_NO)
		WHERE BEGIN_DATE BETWEEN (SELECT DECODE(TO_CHAR(SYSDATE, 'D'), 2, TO_CHAR(SYSDATE+7, 'YY/MM/DD'),
		       TO_DATE(TO_CHAR(SYSDATE - TO_CHAR(SYSDATE, 'D')-7, 'YY/MM/DD')))
		FROM DUAL) AND (SELECT DECODE(TO_CHAR(SYSDATE, 'D'), 2, TO_CHAR(SYSDATE + 14, 'YY/MM/DD'),
		       TO_DATE(TO_CHAR(SYSDATE - TO_CHAR(SYSDATE, 'D')+2, 'YY/MM/DD')))
		FROM DUAL)
		AND COMPLETE_DATE > SYSDATE
		AND W.MEMBER_NO = #{memberNo}
		AND W.WORK_STATUS = 'Y'
		ORDER BY BEGIN_DATE ASC
   </select>
   
  <select id="selectMonthlyProjectCount" resultType="MyStatic">
	SELECT JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV
	FROM 
	       (SELECT COUNT(*) AS JAN
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20200101') AND TO_DATE('20200131')),
	       (SELECT COUNT(*) AS FEB
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20200201') AND TO_DATE('20200229')),
	       (SELECT COUNT(*) AS MAR
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20200301') AND TO_DATE('20200331')),
	        (SELECT COUNT(*) AS APR
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20200401') AND TO_DATE('20200430')),
	        (SELECT COUNT(*) AS MAY
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20200501') AND TO_DATE('20200531')),
	       (SELECT COUNT(*) AS JUN
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20200601') AND TO_DATE('20200630')),
	        (SELECT COUNT(*) AS JUL
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20200701') AND TO_DATE('20200731')),
	        (SELECT COUNT(*) AS AUG
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20200801') AND TO_DATE('20200831')),
	        (SELECT COUNT(*) AS SEP
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20200901') AND TO_DATE('20200930')),
	        (SELECT COUNT(*) AS OCT
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20201001') AND TO_DATE('20201031')),
	        (SELECT COUNT(*) AS NOV
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20201101') AND TO_DATE('20201130')),
	        (SELECT COUNT(*) AS DEC
	          FROM   PROJECT
	         WHERE   START_DATE BETWEEN TO_DATE('20201201') AND TO_DATE('20201231'))
  
   </select>
   
</mapper>










  